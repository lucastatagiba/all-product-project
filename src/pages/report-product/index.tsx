import { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import Head from 'next/head';
import { Button, Center, Flex, Text, useToast } from '@chakra-ui/react';
import PageWithAuth from 'src/components/PageWithAuth';
import { IRowStyle, ProductTable } from 'src/components/Table';
import { colors } from 'src/styles/theme';
import { TbLogout } from 'react-icons/tb';
import { apiWithAuth } from 'src/services';
import { useUserContext } from 'src/context';
import { useIsAuthenticated } from 'src/hooks';
import { useRouter } from 'next/router';

const titles = [
  { title: 'Quantidade', value: '' },
  { title: 'preço Total', value: '' },
];

interface Transactions {
  id: number;
  cost: number;
  quantity: number;
  productId: number;
}

export default function Report() {
  const [transactions, setTransactions] = useState([] as Transactions[]);
  const toast = useToast();
  const router = useRouter();
  const totalQuantity = useRef<number>();
  const { handleLogout, userAuth } = useUserContext();

  const isAuthenticated = useIsAuthenticated();

  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/login');
    } else if (!userAuth?.usuario.isAdmin) {
      router.push('/');
    }
  }, [isAuthenticated, router, userAuth?.usuario.isAdmin]);

  const rowStyles = useMemo<IRowStyle[]>(
    () =>
      transactions.map((_, index) => ({
        rowIndex: index,
        styles: {
          fontSize: 18,
          fontWeight: 700,
        },
      })),
    [transactions]
  );

  const fetchTransactions = useCallback(async () => {
    try {
      const { data } = await apiWithAuth.get<Transactions[]>('/transactions');

      setTransactions(data);
      totalQuantity.current = data.reduce(
        (acc, transaction) => transaction.quantity + acc,
        0
      );
    } catch (error: any) {
      if (error.status === 401 && error.message.includes('token')) {
        if (!toast.isActive('token-error-id')) {
          toast({
            description:
              'Token de autenticação expirado, para continuar refaça login',
            status: 'error',
            duration: 4000,
            position: 'top-right',
            containerStyle: { color: 'white' },
            isClosable: true,
            id: 'token-error-id',
          });
        }
      } else {
        if (!toast.isActive('toast-error-id')) {
          toast({
            description: 'Não foi possível buscar as transações',
            status: 'error',
            duration: 4000,
            position: 'top-right',
            containerStyle: { color: 'white' },
            isClosable: true,
            id: 'toast-error-id',
          });
        }
      }
    }
  }, []);

  useEffect(() => {
    if (!isAuthenticated) return;
    fetchTransactions();
  }, [fetchTransactions, isAuthenticated]);

  const tableContent = useMemo(() => {
    return transactions.map((transaction) => {
      const { id, quantity, cost } = transaction;
      return [
        <Text key={id}>{quantity}</Text>,
        <Text key={id}>R$ {cost * quantity},00</Text>,
      ];
    });
  }, [transactions]);

  return (
    <>
      <Head>
        <title>All product project</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/shoppingcart_80945.png' />
      </Head>

      <PageWithAuth>
        <Flex
          justifyContent='space-around'
          fontWeight='700'
          bg={colors.gray['800']}
          h='100px'
          alignItems='center'
          color={colors.gray['300']}
        >
          <Text>{`Total de Produtos: [${totalQuantity.current}]`}</Text>
          <Flex
            gap={2}
            alignItems='center'
            fontSize={18}
            cursor='pointer'
            onClick={handleLogout}
          >
            Sair <TbLogout size={30} color={colors.gray['300']} />
          </Flex>
        </Flex>

        <ProductTable
          content={tableContent}
          titlesAndValues={titles}
          titles={titles.map((title) => title.title)}
          rowsStyles={rowStyles}
          alignTextOnCenter
          height='400px'
        />
        <Flex justifyContent='center'>
          <Button colorScheme='blackAlpha' onClick={() => router.push('/pdf')}>
            Gerar PDF
          </Button>
        </Flex>
      </PageWithAuth>
    </>
  );
}
